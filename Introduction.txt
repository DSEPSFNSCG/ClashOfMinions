Introduction

We intend to program a game with any number of clients connected to a single server. Every client will be paired with a single other client in a match; any number of matches may occur simultaneously.

It would be a turn-based strategy game where each player places a unit alternatingly on the field, once per turn, with customizable attributes and abilities. Every turn, all units that have already been placed autonomously tries to move forward, attack and/or do a variety of other possible actions.

The main difficulties of this project lies in sending as little data as possible while still maintaining a shared game state, while allowing for error detection and correction, as well as being able to reconnect to an ongoing match after a failure. 

We do this by designing the game such that every match can be reconstruced purely from the list of player inputs in the correct order, and as such every client and the server must all be capable of independently performing all required state transitions with said player inputs. In other words, the game will be a FSM with only the list of transitions being required to obtain a certain game state.

The server and client must also be able to detect when the other no longer is responding for whatever reason; then reconnection must be attempted, and if not possible the match must be ended for all 3 participants (2 players and the server).

